1.)
Yes,we can overload a method with a same return type by passing different number of arguments. I explained it in the following example.
Program:
              import java.util.Scanner;
              public class acad {
              public static void main(String args[]){
                Scanner sc=new Scanner(System.in);
                int x,y,z,answer=0;
                System.out.println("Menu for operations");
                System.out.println("1.Adding two numbers");
                System.out.println("2.Adding three numbers");
                System.out.println("Enter your choice");
                int m=sc.nextInt();
                switch(m)
                {
                case 1: System.out.println("Enter two numbers");
                    x=sc.nextInt();
                    y=sc.nextInt();
                    answer=sum(x,y);
                    System.out.println(answer);
                    break;
                case 2: System.out.println("Enter three numbers");
                    x=sc.nextInt();
                    y=sc.nextInt();
                    z=sc.nextInt();
                    answer=sum(x,y,z);
                    System.out.println(answer);
                    break;
                }
              }
                static int sum(int x,int y)
                {
                   return (x+y);
                }
                static int sum(int x,int y,int z)
                {
                   return (x+y+z);
                }
              }

Output:
Menu for operations
1.Adding two numbers
2.Adding three numbers
Enter your choice
2
Enter three numbers
4
6
7
17


2.)
Program:
              import java.util.ArrayList;
              import java.util.Arrays;
              import java.util.Scanner;
              public class acad {
              public static void main(String args[]){
                Scanner sc=new Scanner(System.in);
                int n=sc.nextInt();
                int [] a=new int[n];
                for(int i=0;i<n;i++)
                {
                  a[i]=sc.nextInt();
                }
                Arrays.sort(a);
                for(int i=n-1;i>=0;i--)
                {
                  System.out.println(a[i]);
                }


              }
              }

Output:
5
6
3
9
2
3
9
6
3
3
2
